# code is written by TAKEHIRO MATSUNAGA
# Student ID: 518030990028
# Execution begins at address 0 
	.pos 0 
init:	irmovl Stack, %esp 
	irmovl Stack, %ebp 
	call Main
	halt

	.align 4
# Source block
src:
	.long 0x00a
	.long 0x0b0
	.long 0xc00
# Destination block
dest:
	.long 0x111
	.long 0x222
	.long 0x333

# MAIN function
Main:	
	irmovl src, %esi
	irmovl dest, %edi
	irmovl $3, %eax
	pushl %esi
	pushl %edi
	pushl %eax
	call copy_block
	ret

# function--int copy_block(int *src, int *dest, int len)
copy_block:
	pushl %ebp
	rrmovl %esp, %ebp
	
	mrmovl 8(%ebp), %ebx
	mrmovl 12(%ebp), %edi
	mrmovl 16(%ebp), %esi	# get arg from stack
	
	irmovl $0, %eax		# %eax = result
	andl %ebx, %ebx		# len == 0?
	je ZERO
L1:	
	mrmovl (%esi), %edx	# get elem from src
	rmmovl %edx, (%edi)	# write elem to dst
	irmovl $4, %ecx
	addl %ecx, %edi
	addl %ecx, %esi		# next elem of src, dst
	xorl %edx, %eax		# xor chexk sum
	irmovl $-1, %ecx	
	addl %ecx, %ebx		# len --
	jne L1
	
ZERO:	popl %ebp
	ret

# The stack starts here and grows to lower addresses
	.pos 0x100		
Stack:	 
