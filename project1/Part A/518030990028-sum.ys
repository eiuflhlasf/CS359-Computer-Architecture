# code is written by TAKEHIRO MATSUNAGA
# Student ID: 518030990028
# Execution begins at address 0 
	.pos 0 
init:	irmovl Stack, %esp  	# Set up stack pointer  
	irmovl Stack, %ebp  	# Set up base pointer   
	call Main		# Execute main program
	halt

#sample list array
	.align 4
ele1:
	.long 0x00a
	.long ele2
ele2:	.long 0x0b0
	.long ele3
ele3:	.long 0xc00
	.long 0

# MAIN function
Main:	
	irmovl ele1 , %esi	# array ptr -> source index
	call sum_list
	ret

# function--int sum_list(list_ptr ls)
# return value to %eax
sum_list:
	irmovl $0, %eax		# %eax is sum
	mrmovl (%esi), %ebx
	andl %ebx, %ebx
	je L2			# no element in array
L1:	mrmovl (%esi), %ebx
	addl %ebx, %eax		# add to sum
	mrmovl 4(%esi), %ebx
	andl %ebx, %ebx
	je L2			# whether array is finish
	rrmovl %ebx, %esi	# next
	jmp L1
L2:	ret

# The stack starts here and grows to lower addresses
	.pos 0x100		
Stack:	 
