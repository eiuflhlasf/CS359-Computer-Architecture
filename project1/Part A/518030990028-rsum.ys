# code is written by TAKEHIRO MATSUNAGA
# Student ID: 518030990028
# Execution begins at address 0 
	.pos 0 
init:	irmovl Stack, %esp 
	irmovl Stack, %ebp 
	call Main
	halt

#sample list array
	.align 4
ele1:
	.long 0x00a
	.long ele2
ele2:	.long 0x0b0
	.long ele3
ele3:	.long 0xc00
	.long 0

# MAIN function
Main:	irmovl ele1, %esi
	irmovl $0, %eax
	pushl %esi
	call rsum_list
	ret

# function--int rsum_list(list_ptr ls)
rsum_list:
	pushl %ebp		# protect ret addr and save bp
	rrmovl %esp, %ebp	# stack handle
	mrmovl 8(%ebp), %esi	# %esi get arg

	andl %esi, %esi		# if zero or addr
	je ZERO

	rrmovl %esi, %ebp	# save %ebp
	mrmovl 4(%esi), %esi	# next
	pushl %esi
	call rsum_list		# func call
	popl %esi		# right sp
	mrmovl (%ebp), %ebx	# %ebx = value
	addl %ebx, %eax
	jmp FIN

ZERO:	irmovl $0, %eax
FIN:	popl %ebp
	ret

# The stack starts here and grows to lower addresses
	.pos 0x200		
Stack:	 
